apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-webserver
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-webserver
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.webserver.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-webserver
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-webserver
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- with .Values.webserver.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.webserver.image.repository }}:{{ .Values.webserver.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.webserver.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: PAPERLESS_REDIS
              value: "redis://{{ .Release.Name }}-broker:6379"
            - name: PAPERLESS_DBHOST
              value: "{{ .Release.Name }}-db"
            {{- if .Values.tika.enabled }}
            - name: PAPERLESS_TIKA_ENABLED
              value: "1"
            - name: PAPERLESS_TIKA_ENDPOINT
              value: "http://{{ .Release.Name }}-tika:9998"
            {{- end }}
            {{- if .Values.gotenberg.enabled }}
            - name: PAPERLESS_TIKA_GOTENBERG_ENDPOINT
              value: "http://{{ .Release.Name }}-gotenberg:3000"
            {{- end }}
            {{- range $key, $value := .Values.webserver.env }}
            {{- if and (ne $key "PAPERLESS_REDIS") (ne $key "PAPERLESS_DBHOST") }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
            {{- if and .Values.webserver.envSecrets .Values.webserver.envSecrets.secretName }}
            - secretRef:
                name: {{ .Values.webserver.envSecrets.secretName }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /usr/src/paperless/data
            - name: media
              mountPath: /usr/src/paperless/media
            - name: consume
              mountPath: /usr/src/paperless/consume
            - name: export
              mountPath: /usr/src/paperless/export
          resources:
            {{- toYaml .Values.webserver.resources | nindent 12 }}
      {{- with .Values.webserver.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.webserver.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.webserver.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
          {{- if .Values.persistence.data.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: media
          {{- if .Values.persistence.media.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-media
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: consume
          {{- if .Values.persistence.consume.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-consume
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: export
          {{- if .Values.persistence.export.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-export
          {{- else }}
          emptyDir: {}
          {{- end }}
